version: '3.8'

services:
  keycloak-database:
    container_name: keycloak-database
    image: postgres:9.6
    environment:
      POSTGRES_USER: kc
      POSTGRES_PASSWORD: kc
    ports:
      - 5437:5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U kc']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kc
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:21.0.2
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      DB_VENDOR: postgres
      DB_PORT: 5437
      DB_USER: kc
      DB_PASSWORD: kc
    ports:
      - 8080:8080
    depends_on:
      keycloak-database:
        condition: service_healthy
    networks:
      - kc
      - ordering
  kong-database:
    container_name: kong-database
    image: postgres:9.6
    ports:
      - 5436:5432
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DATABASE: kong
    networks:
      - kong-net
    volumes:
      - kongdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U kong']
      interval: 5s
      timeout: 5s
      retries: 5
  kong-migrations:
    container_name: kong-migrations
    image: kong:3.2.2-alpine
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
  kong-gateway:
    container_name: kong-gateway
    image: kong:3.2.2-alpine
    command: kong start
    depends_on:
      kong-migrations:
        condition: service_started
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - 8000:8000
      - 8443:8443
      - 127.0.0.1:8001:8001
      - 127.0.0.1:8444:8444
    networks:
      - kong-net
      - ordering

  konga:
    container_name: konga
    image: pantsel/konga
    environment:
      TOKEN_SECRET: secret
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_DATABASE: kong
      DB_USER: kong
      DB_PASSWORD: kong
      NODE_ENV: development
      KONGA_HOOK_TIMEOUT: 120000
    ports:
      - 9000:1337
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_started
      orders:
        condition: service_started
    networks:
      - kong-net
      - ordering

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.9.28-alpine
    ports:
      - 5672:5672

  ordersdb:
    container_name: ordersdb
    image: postgres:13-alpine
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ordersdb
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ordering

  billingdb:
    container_name: billingdb
    image: postgres:13-alpine
    ports:
      - 5434:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: billingdb
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  authdb:
    container_name: authdb
    image: postgres:13-alpine
    ports:
      - 5435:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: authdb
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ordering

  orders:
    container_name: orders
    build:
      dockerfile: ./packages/orders/Dockerfile
    command: sh -c
      "npx prisma generate && npx prisma migrate deploy --schema ./prisma/schema.prisma
      && npm run start:dev"
    env_file:
      - ./packages/orders/prisma/.env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@ordersdb:5432/ordersdb?schema=public
    depends_on:
      ordersdb:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    volumes:
      - ./packages/orders:/usr/app
      - /usr/app/node_modules
    ports:
      - 3001:3001
    networks:
      - ordering

  billing:
    container_name: billing
    build:
      dockerfile: ./packages/billing/Dockerfile
    command: sh -c
      "npx prisma generate && npx prisma migrate deploy --schema ./prisma/schema.prisma
      && npm run start:dev"
    env_file:
      - ./packages/billing/prisma/.env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@billingdb:5432/billingdb?schema=public
    depends_on:
      billingdb:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    volumes:
      - ./packages/billing:/usr/app
      - /usr/app/node_modules

  auth:
    container_name: auth
    build:
      dockerfile: ./packages/auth/Dockerfile
    command: sh -c
      "npx prisma generate && npx prisma migrate deploy --schema ./prisma/schema.prisma
      && npm run start:dev"
    env_file:
      - ./packages/auth/prisma/.env.development
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@authdb:5432/authdb?schema=public
    depends_on:
      authdb:
        condition: service_healthy
    volumes:
      - ./packages/auth:/usr/app
      - /usr/app/node_modules
    networks:
      - ordering

networks:
  kong-net:
    external: true
  ordering:
    driver: bridge
  kc:
    driver: bridge
volumes:
  kongdata:
